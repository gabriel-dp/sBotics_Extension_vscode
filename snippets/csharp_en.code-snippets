{
                "bc.Wait": {
                    "prefix": "bc.Wait",
                    "body": ["bc.Wait(${1:Time[int]});",],"description":"Waits for a time in miliseconds before proceeding. The values have to be integers greater than 0. "},
                "bc.Distance": {
                    "prefix": "bc.Distance",
                    "body": ["bc.Distance(${1:Sensor[int]})",],"description":"Returns a number with the distance perceived by the referenced (1st parameter) ultrasonic sensor. The references for each sensor are present in the Robot settings panel of the simulator (however, in C# you have to subtract one as arrays start on 0). "},
                "bc.Compass": {
                    "prefix": "bc.Compass",
                    "body": ["bc.Compass()",],"description":"Returns the angle of the robot in relation to the north (geographically). "},
                "bc.DetectDistance": {
                    "prefix": "bc.DetectDistance",
                    "body": ["bc.DetectDistance(${1:Sensor[int]}, ${2:Minimum[int]}, ${3:Maximum[int]})",],"description":"Returns if the referenced ultrasonic sensor (1st parameter) is detecting something between the minimum (2nd parameter) and maximum (3rd parameter) distances. The references for each sensor are present in the Robot settings panel of the simulator (however, in C# you have to subtract one as arrays start on 0).  "},
                "bc.MoveFrontal": {
                    "prefix": "bc.MoveFrontal",
                    "body": ["bc.MoveFrontal(${1:Strength[int]}, ${2:Strength[int]});",],"description":"Moves the robot in different directions depending on the applied forces (1st parameter for the left-hand-side motors and 2nd parameter for the right-hand-side ones). The forces can vary from -300 to 300 if both forces are equal or -1000 to 1000 if they're not. "},
                "bc.ReturnColor": {
                    "prefix": "bc.ReturnColor",
                    "body": ["bc.ReturnColor(${1:Sensor[int]})",],"description":"Returns the color percieved by the referenced (1st parameter) sensor. Colors can either be: “RED”, “GREEN”, “BLUE”, “YELLOW”, “CYAN”, “MAGENTA”, “BLACK” and “WHITE”. The references for each sensor are present in the Robot settings panel of the simulator (however, in C# you have to subtract one as arrays start on 0). "},
                "bc.Lightness": {
                    "prefix": "bc.Lightness",
                    "body": ["bc.Lightness(${1:Sensor[int]})",],"description":"Returns the light value percieved by the referenced (1st parameter) sensor. Light values vary from a scale of 0 to 100. The references for each sensor are present in the Robot settings panel of the simulator (however, in C# you have to subtract one as arrays start on 0).  "},
                "bc.PrintConsole": {
                    "prefix": "bc.PrintConsole",
                    "body": ["bc.PrintConsole(${1:Console Line[int]}, ${2:Text[string]});",],"description":"Writes on the specified line on the console (1st parameter) the string on the 2nd parameter. The console has 3 lines. "},
                "bc.OpenActuator": {
                    "prefix": "bc.OpenActuator",
                    "body": ["bc.OpenActuator();",],"description":"Opens the claw/scoop of the Forklift actuator for the time specified (1st parameter). "},
                "bc.CloseActuator": {
                    "prefix": "bc.CloseActuator",
                    "body": ["bc.CloseActuator();",],"description":"Closes the claw/scoop of the Forklift actuator for the time specified (1st parameter). "},
                "bc.ActuatorUp": {
                    "prefix": "bc.ActuatorUp",
                    "body": ["bc.ActuatorUp(${1:Time in milliseconds[int]});",],"description":"Raises the claw/scoop of the actuator for the time specified (1st parameter). "},
                "bc.ActuatorDown": {
                    "prefix": "bc.ActuatorDown",
                    "body": ["bc.ActuatorDown(${1:Time in milliseconds[int]});",],"description":"Lowers the claw/scoop of the actuator for the time specified (1st parameter). "},
                "bc.TurnActuatorUp": {
                    "prefix": "bc.TurnActuatorUp",
                    "body": ["bc.TurnActuatorUp(${1:Time in milliseconds[int]});",],"description":"Turns the claw/scoop of the actuator up for the time specified (1st parameter). "},
                "bc.TurnActuatorDown": {
                    "prefix": "bc.TurnActuatorDown",
                    "body": ["bc.TurnActuatorDown(${1:Time in milliseconds[int]});",],"description":"Turns the claw/scoop of the actuator down for the time specified (1st parameter). "},
                "bc.ClearConsole": {
                    "prefix": "bc.ClearConsole",
                    "body": ["bc.ClearConsole();",],"description":"Clears all text being shown on the console. "},
                "bc.ReturnGreen": {
                    "prefix": "bc.ReturnGreen",
                    "body": ["bc.ReturnGreen(${1:Sensor[int]})",],"description":"Returns the intensity of the green color perceived by the indicated sensor. The numbering of the color sensors is available in the sensor tab of the simulator tutorial. The references for each sensor are present in the Robot settings panel of the simulator (however, in C# you have to subtract one as arrays start on 0). "},
                "bc.ReturnBlue": {
                    "prefix": "bc.ReturnBlue",
                    "body": ["bc.ReturnBlue(${1:Sensor[int]})",],"description":"Returns the intensity of the blue color perceived by the indicated sensor. The numbering of the color sensors is available in the sensor tab of the simulator tutorial. The references for each sensor are present in the Robot settings panel of the simulator (however, in C# you have to subtract one as arrays start on 0). "},
                "bc.ReturnRed": {
                    "prefix": "bc.ReturnRed",
                    "body": ["bc.ReturnRed(${1:Sensor[int]})",],"description":"Returns the intensity of the red color perceived by the indicated sensor. The numbering of the color sensors is available in the sensor tab of the simulator tutorial. The references for each sensor are present in the Robot settings panel of the simulator (however, in C# you have to subtract one as arrays start on 0). "},
                "bc.MoveFrontalAngles": {
                    "prefix": "bc.MoveFrontalAngles",
                    "body": ["bc.MoveFrontalAngles(${1:Strength[int]}, ${2:Angle[int]});",],"description":"Apply a force to the robot's wheels so that it rotates a certain angle, positive or negative, from its current direction around the axis. (Force limit: 0 to 500) "},
                "bc.Touch": {
                    "prefix": "bc.Touch",
                    "body": ["bc.Touch(${1:Sensor[int]})",],"description":"Returns the state of the specified (1st parameter) touch sensor. The references for each sensor are present in the Robot settings panel of the simulator (however, in C# you have to subtract one as arrays start on 0).  "},
                "bc.AngleActuator": {
                    "prefix": "bc.AngleActuator",
                    "body": ["bc.AngleActuator()",],"description":"Returns the number corresponding to the angle of inclination of the robot actuator in relation to the plane. "},
                "bc.ActuatorSpeed": {
                    "prefix": "bc.ActuatorSpeed",
                    "body": ["bc.ActuatorSpeed(${1:Strength[int]});",],"description":"Modifies the force applied to the Movement of the actuators.  (Force limit: 0 a 150) "},
                "bc.TurnLedOn": {
                    "prefix": "bc.TurnLedOn",
                    "body": ["bc.TurnLedOn(${1:Red[int]}, ${2:Green[int]}, ${3:Blue[int]});",],"description":"Turn on the led in the specified color from an RGB code. Parameter 1 corresponds to R, parameter 2 to G and parameter 3 to B. The received RGB values ​​can range from 0 to 255. "},
                "bc.TurnLedOff": {
                    "prefix": "bc.TurnLedOff",
                    "body": ["bc.TurnLedOff();",],"description":"Turn off the led. "},
                "bc.MoveFrontalRotations": {
                    "prefix": "bc.MoveFrontalRotations",
                    "body": ["bc.MoveFrontalRotations(${1:Strength[int]}, ${2:Rotations[int]});",],"description":"Moves the robot forward with the force indicated by the number of revolutions provided. (Force limit: 300) "},
                "bc.SaveConsole": {
                    "prefix": "bc.SaveConsole",
                    "body": ["bc.SaveConsole();",],"description":"Turns the write-console-to-text-file feature on. "},
                "bc.stopSavingLCD": {
                    "prefix": "bc.stopSavingLCD",
                    "body": ["bc.stopSavingLCD();",],"description":"Turns the write-console-to-text-file feature off. "},
                "bc.EraseConsoleFile": {
                    "prefix": "bc.EraseConsoleFile",
                    "body": ["bc.EraseConsoleFile();",],"description":"Clears all content inside the consoleLog.txt file found on the installation folder  "},
                "bc.RandomLimits": {
                    "prefix": "bc.RandomLimits",
                    "body": ["bc.RandomLimits(${1:Parameter A[int]}, ${2:Parameter B[int]})",],"description":"Returns a random number between the given integers. "},
                "bc.Timer": {
                    "prefix": "bc.Timer",
                    "body": ["bc.Timer()",],"description":"Returns the time in milliseconds that has elapsed since the execution of the routine or since the last command resetStopwatch(). "},
                "bc.ResetTimer": {
                    "prefix": "bc.ResetTimer",
                    "body": ["bc.ResetTimer();",],"description":"Reset the elapsed time on the timer and start a new countdown. "},
                "bc.ClearConsoleLine": {
                    "prefix": "bc.ClearConsoleLine",
                    "body": ["bc.ClearConsoleLine(${1:Console Line[int]});",],"description":"Clears all text in one of the three lines of the console. "},
                "bc.WriteText": {
                    "prefix": "bc.WriteText",
                    "body": ["bc.WriteText(${1:Text[int]});",],"description":"Registers a string to a text file called consoleLog.txt found on the installation folder. "},
                "bc.WriteNumber": {
                    "prefix": "bc.WriteNumber",
                    "body": ["bc.WriteNumber(${1:Number[int]});",],"description":"Registers a number to a text file called consoleLog.txt found on the installation folder. "},
                "bc.MoveFrontalRight": {
                    "prefix": "bc.MoveFrontalRight",
                    "body": ["bc.MoveFrontalRight(${1:Strength[int]});",],"description":"Applies the given force to the right motor.  (The force is limited from -300 to 300) "},
                "bc.MoveFrontalLeft": {
                    "prefix": "bc.MoveFrontalLeft",
                    "body": ["bc.MoveFrontalLeft(${1:Strength[int]});",],"description":"Applies the given force to the left motor.  (The force is limited from -300 to 300) "},
                "bc.ColorSensibility": {
                    "prefix": "bc.ColorSensibility",
                    "body": ["bc.ColorSensibility();",],"description":"Adjusts the default sensibility for the color function/sensor. The sensibility value has to be a number from 0 to 100. The default sensibility is 25. "},
                "bc.AngleScoop": {
                    "prefix": "bc.AngleScoop",
                    "body": ["bc.AngleScoop()",],"description":"Returns the angle of the actuator scoop in relation to the arena. "},
                "bc.SetPrecision": {
                    "prefix": "bc.SetPrecision",
                    "body": ["bc.SetPrecision(${1:Precision[int]});",],"description":"Adjusts the quantity of decimal places to be processed by the simulator to the specified value. "},
                "bc.PlayNote": {
                    "prefix": "bc.PlayNote",
                    "body": ["bc.PlayNote(${1:Speaker[int]}, ${2:Musical Note[int]}, ${3:Time in milliseconds[int]});",],"description":"Plays a musical note (2nd parameter) on the specified (1st parameter) buzzer speaker for a specified time period in miliseconds (3rd parameter). Valid musical notes: do, re, mi, fa, sol, la, ti, A, B, C, D, E, F, G. "},
                "bc.PlaySound": {
                    "prefix": "bc.PlaySound",
                    "body": ["bc.PlaySound(${1:Speaker[int]}, ${2:Frequency[int]}, ${3:Time in milliseconds[int]}, ${4:Wave Type[int]});",],"description":"Plays on the specified (1st parameter) buzzer speaker a specific sBotics frequency (2nd parameter) for a specified time period in miliseconds (3rd parameter) with a specific wave format (4th parameter). Wave formats are: SQUARE, SAWTOOTH, NOISE, MUTE. "},
                "bc.ChangeWave": {
                    "prefix": "bc.ChangeWave",
                    "body": ["bc.ChangeWave(${1:Wave Type[int]});",],"description":"Adjusts the wave format that the play function will have."},
                "bc.StopSound": {
                    "prefix": "bc.StopSound",
                    "body": ["bc.StopSound(${1:Speaker[int]});",],"description":"Stops the execution of the specified (1st parameter) buzzer speaker. "},
                "bc.ToPitch": {
                    "prefix": "bc.ToPitch",
                    "body": ["bc.ToPitch(${1:Frequency in Hertz[int]})",],"description":"Converts a given Hertz frequency to the unit of frequency of the simulator. "},
                "bc.ToHertz": {
                    "prefix": "bc.ToHertz",
                    "body": ["bc.ToHertz(${1:Frequency in the Simulator Unit[int]})",],"description":"Converts a given sBotics frequency to Hertz. "},
                "bc.PlaySoundHertz": {
                    "prefix": "bc.PlaySoundHertz",
                    "body": ["bc.PlaySoundHertz(${1:Speaker[int]}, ${2:Frequency[int]}, ${3:Time in milliseconds[int]}, ${4:Wave Type[int]});",],"description":"Plays on the specified (1st parameter) buzzer speaker a specific HERTZ frequency (2nd parameter) for a specified time period in miliseconds (3rd parameter) with a specific wave format (4th parameter). Wave formats are: SQUARE, SAWTOOTH, NOISE, MUTE. "},
                "bc.GetFrontalRightForce": {
                    "prefix": "bc.GetFrontalRightForce",
                    "body": ["bc.GetFrontalRightForce()",],"description":"Returns the right motor speed. "},
                "bc.GetFrontalLeftForce": {
                    "prefix": "bc.GetFrontalLeftForce",
                    "body": ["bc.GetFrontalLeftForce()",],"description":"Returns the left motor speed. "},
                "bc.WriteBoolean": {
                    "prefix": "bc.WriteBoolean",
                    "body": ["bc.WriteBoolean(${1:Parameter[boolean]});",],"description":"Registers a boolean to a text file called consoleLog.txt found on the installation folder. "},
                "bc.Draw": {
                    "prefix": "bc.Draw",
                    "body": ["bc.Draw();",],"description":"Enables the pencil for painting.  "},
                "bc.StopDrawing": {
                    "prefix": "bc.StopDrawing",
                    "body": ["bc.StopDrawing();",],"description":"Retracts the pencil interrupting the painting. "},
                "bc.ChangePencilColor": {
                    "prefix": "bc.ChangePencilColor",
                    "body": ["bc.ChangePencilColor(${1:Red[int]}, ${2:Green[int]}, ${3:Blue[int]});",],"description":"Changes the color of the pencil to a specific RGB color. "},
                "bc.TurnFanOn": {
                    "prefix": "bc.TurnFanOn",
                    "body": ["bc.TurnFanOn();",],"description":"Turns the fan actuator on. "},
                "bc.TurnFanOff": {
                    "prefix": "bc.TurnFanOff",
                    "body": ["bc.TurnFanOff();",],"description":"Turns the fan actuator off. "},
                "bc.Heat": {
                    "prefix": "bc.Heat",
                    "body": ["bc.Heat()",],"description":"Returns the temperature perceived by the temperature sensor of the robot. "},
                "bc.HasVictim": {
                    "prefix": "bc.HasVictim",
                    "body": ["bc.HasVictim()",],"description":"Returns true if there is one or more victims inside the actuator. "},
                "bc.RobotSpeed": {
                    "prefix": "bc.RobotSpeed",
                    "body": ["bc.RobotSpeed()",],"description":"Returns the speed of rotation of the motors.  "},
                "bc.Inclination": {
                    "prefix": "bc.Inclination",
                    "body": ["bc.Inclination()",],"description":"Returns the angle of inclnation of the robot in relation to the arena. "},
     "if": {
          "prefix": "?if",
          "body": [
               "if (${1:condition}) {\n\t\n}"
          ],
          "description": "Structure that executes commands only if the defined condition is true."
     },
     "ifelse": {
          "prefix": "?ifelse",
          "body": [
               "if (${1:condition}) {\n\t\n} else {\n\t\n}"
          ],
          "description": "Structure that evaluates the condition and executes the 'if' commands if it is true and the 'else' if it is false."
     },
     "ifelseif": {
          "prefix": "?ifelseif",
          "body": [
               "if (${1:condition}) \n\t\n} else if (${1:condition}) {\n\t\n} "
          ],
          "description": "Structure that makes possible to verify another 'if' condition, if the first one is false."
     },
     "while": {
          "prefix": "?while",
          "body": [
               "while (${1:condition}) {\n\t\n}"
          ],
          "description": "Loop that executes the commands until the condition be false."
     },
     "do": {
          "prefix": "?do",
          "body": [
               "do {\n\t\n} while (${1:condition})"
          ],
          "description": "Loop that executes the commands before checking the condition, until be false."
     },
     "for": {
          "prefix": "?for",
          "body": [
               "for (int ${1:i} = 0; ${2:i} < ${3:max}; ${4:i}++) {\n\t\n}"
          ],
          "description": "Loop that executes commands for a predetermined number of times."
     },
     "switch": {
          "prefix": "?switch",
          "body": [
               "switch (${1:value}) {\n\tcase ${2:case1}:\n\t\t${3:action1}\n\t\tbreak;\n\tdefault:\n\t\t${4:default}\n}"
          ],
          "description": "Conditional structure that compare the input value to a defined case."
     },
     "Main": {
          "prefix": "?main",
          "body": [
               "void Main () {\n\t\n}"
          ],
          "description": "Basic structure of a C# code."
     }
}