{
                "bc.Wait": {
                    "prefix": "bc.Wait",
                    "body": ["bc.Wait(${1:Tempo[numero]});",],"description":"Espera de um tempo em milissegundos antes de executar o próximo comando. Os valores devem ser sempre inteiros maiores que 0."},
                "bc.Distance": {
                    "prefix": "bc.Distance",
                    "body": ["bc.Distance(${1:Sensor[numero]})",],"description":"Retorna um valor do tipo número com a distância percebida pelo sensor de ultrassom informado por um número na função. A numeração dos sensores de ultrassom estão disponíveis na aba sensores do tutorial do simulador."},
                "bc.Compass": {
                    "prefix": "bc.Compass",
                    "body": ["bc.Compass()",],"description":"Retorna o ângulo do robô em relação ao norte geográfico. O retorno é um valor do tipo número."},
                "bc.Inclination": {
                    "prefix": "bc.Inclination",
                    "body": ["bc.Inclination()",],"description":"Retorna o ângulo de inclinação do robô em relação ao plano da arena. O retorno é um valor do tipo número."},
                "bc.DetectDistance": {
                    "prefix": "bc.DetectDistance",
                    "body": ["bc.DetectDistance(${1:Sensor[numero]}, ${2:Mínimo[numero]}, ${3:Máximo[numero]})",],"description":"Retorna se o sensor ultrassônico indicado (parâmetro 1)  está detectando algo entre as distâncias mínima (parâmetro 2) e máxima (parâmetro 3) indicadas. O retorno será verdadeiro caso um objeto seja percebido pelo sensor, e falso caso contrário."},
                "bc.MoveFrontal": {
                    "prefix": "bc.MoveFrontal",
                    "body": ["bc.MoveFrontal(${1:Força[numero]}, ${2:Força[numero]});",],"description":"Move o robô em diferentes direções dependendo da força aplicada. Deve ser indicada a força a ser aplicada na roda da esquerda e na da direita.(Limites de força: negativo(300) a 300 em curvas fora do eixo, negativo(300) a 300 para movimentações em linha reta e negativo(1000) a 1000 para giro no próprio eixo.)"},
                "bc.ReturnColor": {
                    "prefix": "bc.ReturnColor",
                    "body": ["bc.ReturnColor(${1:Sensor[numero]})",],"description":"Retorna a cor percebida pelo sensor indicado. A cor pode ser “VERMELHO”, “VERDE”, “AZUL”, “AMARELO”, “PRETO” e “BRANCO”. A numeração dos sensores de cor estão disponíveis na aba sensores do tutorial do simulador."},
                "bc.Lightness": {
                    "prefix": "bc.Lightness",
                    "body": ["bc.Lightness(${1:Sensor[numero]})",],"description":"Retorna um valor do tipo número com a quantidade de luz percebida pelo sensor de luz indicado. A numeração dos sensores de luz estão disponíveis na aba sensores do tutorial do simulador. "},
                "bc.PrintConsole": {
                    "prefix": "bc.PrintConsole",
                    "body": ["bc.PrintConsole(${1:Linha do Console[numero]}, ${2:Texto[texto]});",],"description":"Imprime na linha especificada do console virtual o texto indicado. O console possui três linhas: 1, 2 e 3."},
                "bc.OpenActuator": {
                    "prefix": "bc.OpenActuator",
                    "body": ["bc.OpenActuator();",],"description":"Abre a garra do atuador empilhadeira durante o tempo especificado em milissegundos."},
                "bc.CloseActuator": {
                    "prefix": "bc.CloseActuator",
                    "body": ["bc.CloseActuator();",],"description":"Fecha a garra do atuador empilhadeira durante o tempo especificado em milissegundos."},
                "bc.ActuatorUp": {
                    "prefix": "bc.ActuatorUp",
                    "body": ["bc.ActuatorUp(${1:Tempo em Milissegundos[numero]});",],"description":"Levanta o atuador pelo tempo indicado em milissegundos."},
                "bc.ActuatorDown": {
                    "prefix": "bc.ActuatorDown",
                    "body": ["bc.ActuatorDown(${1:Tempo em Milissegundos[numero]});",],"description":"Abaixa o atuador por um tempo indicado em milissegundos."},
                "bc.TurnActuatorUp": {
                    "prefix": "bc.TurnActuatorUp",
                    "body": ["bc.TurnActuatorUp(${1:Tempo em Milissegundos[numero]});",],"description":"Gira o atuador para cima por um tempo indicado em milissegundos."},
                "bc.TurnActuatorDown": {
                    "prefix": "bc.TurnActuatorDown",
                    "body": ["bc.TurnActuatorDown(${1:Tempo em Milissegundos[numero]});",],"description":"Gira o atuador para baixo por um tempo especificado em milissegundos."},
                "bc.ClearConsole": {
                    "prefix": "bc.ClearConsole",
                    "body": ["bc.ClearConsole();",],"description":"Apaga todo texto previamente escrito no console."},
                "bc.Millis": {
                    "prefix": "bc.Millis",
                    "body": ["bc.Millis()",],"description":"Retorna o tempo em milissegundos decorrido desde o início da execução da rotina."},
                "bc.ReturnGreen": {
                    "prefix": "bc.ReturnGreen",
                    "body": ["bc.ReturnGreen(${1:Sensor[numero]})",],"description":"Retorna a intensidade da cor verde percebida pelo sensor indicado. A numeração dos sensores de cor estão disponíveis na aba sensores do tutorial do simulador."},
                "bc.ReturnBlue": {
                    "prefix": "bc.ReturnBlue",
                    "body": ["bc.ReturnBlue(${1:Sensor[numero]})",],"description":"Retorna a intensidade da cor azul percebida pelo sensor indicado. A numeração dos sensores de cor estão disponíveis na aba sensores do tutorial do simulador."},
                "bc.ReturnRed": {
                    "prefix": "bc.ReturnRed",
                    "body": ["bc.ReturnRed(${1:Sensor[numero]})",],"description":"Retorna a intensidade da cor vermelha percebida pelo sensor indicado. A numeração dos sensores de cor estão disponíveis na aba sensores do tutorial do simulador."},
                "bc.MoveFrontalAngles": {
                    "prefix": "bc.MoveFrontalAngles",
                    "body": ["bc.MoveFrontalAngles(${1:Força[numero]}, ${2:Ângulo[numero]});",],"description":"Aplica uma força nas rodas do robô para que ele rotacione em torno do eixo uma determinada angulação, positiva ou negativa, a partir de sua direção atual.(Limite de força: 0 a 500)"},
                "bc.Touch": {
                    "prefix": "bc.Touch",
                    "body": ["bc.Touch(${1:Sensor[numero]})",],"description":"Retorna o estado do sensor de toque especificado. O retorno pode ser verdadeiro ou falso. A numeração dos sensores de toque estão disponíveis na aba sensores do tutorial do simulador. "},
                "bc.AngleActuator": {
                    "prefix": "bc.AngleActuator",
                    "body": ["bc.AngleActuator()",],"description":"Retorna o número correspondente ao ângulo de inclinação do atuador robô em relação ao plano."},
                "bc.ActuatorSpeed": {
                    "prefix": "bc.ActuatorSpeed",
                    "body": ["bc.ActuatorSpeed(${1:Força[numero]});",],"description":"Modifica a força aplicada na movimentação dos atuadores. (Limite de força: 0 a 150)"},
                "bc.TurnLedOn": {
                    "prefix": "bc.TurnLedOn",
                    "body": ["bc.TurnLedOn(${1:Vermelho[numero]}, ${2:Verde[numero]}, ${3:Azul[numero]});",],"description":"Acende o led na cor especificada a partir de um código código RGB. O parâmetro 1 corresponde ao R, o parâmetro 2 ao G e o parâmetro 3 ao B. Os valores de RGB recebidos podem variar de 0 a 255."},
                "bc.TurnLedOff": {
                    "prefix": "bc.TurnLedOff",
                    "body": ["bc.TurnLedOff();",],"description":"Apaga o led."},
                "bc.MoveFrontalRotations": {
                    "prefix": "bc.MoveFrontalRotations",
                    "body": ["bc.MoveFrontalRotations(${1:Força[numero]}, ${2:Rotações[numero]});",],"description":"Move o robô para frente com a força indicada pela quantidade de rotações fornecida.(Limite de força: 300)"},
                "bc.SaveConsole": {
                    "prefix": "bc.SaveConsole",
                    "body": ["bc.SaveConsole();",],"description":"Habilita o registro em arquivo do conteúdo escrito no console."},
                "bc.stopSavingLCD": {
                    "prefix": "bc.stopSavingLCD",
                    "body": ["bc.stopSavingLCD();",],"description":"Desabilita o registro em arquivo do conteúdo escrito no console."},
                "bc.EraseConsoleFile": {
                    "prefix": "bc.EraseConsoleFile",
                    "body": ["bc.EraseConsoleFile();",],"description":"Apagar o conteúdo salvo no arquivo de registro. "},
                "bc.RandomLimits": {
                    "prefix": "bc.RandomLimits",
                    "body": ["bc.RandomLimits(${1:Parâmetro A[numero]}, ${2:Parâmetro B[numero]})",],"description":"Retorna um número inteiro aleatório entre os números inteiros fornecidos."},
                "bc.Timer": {
                    "prefix": "bc.Timer",
                    "body": ["bc.Timer()",],"description":"Retorna o tempo em milissegundos decorrido desde o início da execução da rotina ou desde o último comando zerartemporizador()."},
                "bc.ResetTimer": {
                    "prefix": "bc.ResetTimer",
                    "body": ["bc.ResetTimer();",],"description":"Zera o tempo decorrido no temporizador e inicia uma nova contagem."},
                "bc.ClearConsoleLine": {
                    "prefix": "bc.ClearConsoleLine",
                    "body": ["bc.ClearConsoleLine(${1:Linha do Console[numero]});",],"description":"Apaga o texto escrito na linha especificada do console. O console possui três linhas: 1, 2 e 3."},
                "bc.WriteText": {
                    "prefix": "bc.WriteText",
                    "body": ["bc.WriteText(${1:Texto[texto]});",],"description":"Registra o texto informado em um arquivo chamado consoleLog.txt"},
                "bc.WriteNumber": {
                    "prefix": "bc.WriteNumber",
                    "body": ["bc.WriteNumber(${1:Número[numero]});",],"description":"Registra o número informado em um arquivo chamado consoleLog.txt"},
                "bc.MoveFrontalRight": {
                    "prefix": "bc.MoveFrontalRight",
                    "body": ["bc.MoveFrontalRight(${1:Força[numero]});",],"description":"Aplica a força indicada no motor da direita. (Limites de força: negativo(300) a 300)"},
                "bc.MoveFrontalLeft": {
                    "prefix": "bc.MoveFrontalLeft",
                    "body": ["bc.MoveFrontalLeft(${1:Força[numero]});",],"description":"Aplica a força indicada no motor da esquerda. (Limite de força: negativo(300) a 300)"},
                "bc.ColorSensibility": {
                    "prefix": "bc.ColorSensibility",
                    "body": ["bc.ColorSensibility(${1:Sensibilidade[numero]});",],"description":"Ajusta a sensibilidade do sensor de cor. Deve ser fornecido um valor de sensibilidade que varia de 0 a 100. A sensibilidade padrão é 25."},
                "bc.AngleScoop": {
                    "prefix": "bc.AngleScoop",
                    "body": ["bc.AngleScoop()",],"description":"Retorna o número correspondente ao ângulo de giro do atuador robô em relação ao plano."},
                "bc.SetPrecision": {
                    "prefix": "bc.SetPrecision",
                    "body": ["bc.SetPrecision(${1:Precisão[numero]});",],"description":"Ajusta a quantidade de casas decimais manipuladas para o valor especificado."},
                "bc.PlayNote": {
                    "prefix": "bc.PlayNote",
                    "body": ["bc.PlayNote(${1:Alto-Falante[numero]}, ${2:Nota Musical[texto]}, ${3:Tempo em Milissegundos[numero]});",],"description":"Toca uma nota musical pelo tempo indicado no alto-falante especificado. As notas musicais podem ser: do, re, mi, fa, sol, la e si."},
                "bc.PlaySound": {
                    "prefix": "bc.PlaySound",
                    "body": ["bc.PlaySound(${1:Alto-Falante[numero]}, ${2:Frequência[numero]}, ${3:Tempo em Milissegundos[numero]}, ${4:Tipo de Onda[texto]});",],"description":"Toca no alto-falante informado, a frequência especificada por um determinado tempo utilizando a onda informada. Os valores de frequência, em unidade própria do simulador, variam de 0 a 300 e as ondas podem ser QUADRADA, DENTE-DE-SERRA, RUIDO ou MUDO."},
                "bc.ChangeWave": {
                    "prefix": "bc.ChangeWave",
                    "body": ["bc.ChangeWave(${1:Tipo de Onda[texto]});",],"description":"Ajusta o tipo de onda que irá modular o som emitido na função tocar."},
                "bc.StopSound": {
                    "prefix": "bc.StopSound",
                    "body": ["bc.StopSound(${1:Alto-Falante[numero]});",],"description":"Interrompe a execução do som no alto-falante especificado."},
                "bc.ToPitch": {
                    "prefix": "bc.ToPitch",
                    "body": ["bc.ToPitch(${1:Frequência em Hertz[numero]})",],"description":"Converte o valor de frequência em Hertz especificado para a unidade de frequência do simulador."},
                "bc.ToHertz": {
                    "prefix": "bc.ToHertz",
                    "body": ["bc.ToHertz(${1:Frequência na Unidade do Simulador[numero]})",],"description":"Converte o valor de frequência na unidade do simulador especificado para Hertz."},
                "bc.PlaySoundHertz": {
                    "prefix": "bc.PlaySoundHertz",
                    "body": ["bc.PlaySoundHertz(${1:Alto-Falante[numero]}, ${2:Frequência[numero]}, ${3:Tempo em Milissegundos[numero]}, ${4:Tipo de Onda[texto]});",],"description":"Toca no alto-falante informado, a frequência especificada por um determinado tempo utilizando a onda informada. Os valores de frequência informados são em Hertz e as ondas podem ser QUADRADA, DENTE-DE-SERRA, RUIDO ou MUDO."},
                "bc.GetFrontalRightForce": {
                    "prefix": "bc.GetFrontalRightForce",
                    "body": ["bc.GetFrontalRightForce()",],"description":"Retorna a velocidade do motor da direita."},
                "bc.GetFrontalLeftForce": {
                    "prefix": "bc.GetFrontalLeftForce",
                    "body": ["bc.GetFrontalLeftForce()",],"description":"Retorna a velocidade do motor da esquerda."},
                "bc.WriteBoolean": {
                    "prefix": "bc.WriteBoolean",
                    "body": ["bc.WriteBoolean(${1:Parâmetro[booleano]});",],"description":"Registra o booleano informado em um arquivo chamado consoleLog.txt"},
                "bc.Draw": {
                    "prefix": "bc.Draw",
                    "body": ["bc.Draw();",],"description":"Habilita o pincel para pintura. "},
                "bc.StopDrawing": {
                    "prefix": "bc.StopDrawing",
                    "body": ["bc.StopDrawing();",],"description":"Recolhe o pincel interrompendo a pintura."},
                "bc.ChangePencilColor": {
                    "prefix": "bc.ChangePencilColor",
                    "body": ["bc.ChangePencilColor(${1:Vermelho[numero]}, ${2:Verde[numero]}, ${3:Azul[numero]});",],"description":"Altera o pincel por um na cor RGB especificada."},
                "bc.TurnFanOn": {
                    "prefix": "bc.TurnFanOn",
                    "body": ["bc.TurnFanOn();",],"description":"Liga o atuador ventilador disponível no Robô 3."},
                "bc.TurnFanOff": {
                    "prefix": "bc.TurnFanOff",
                    "body": ["bc.TurnFanOff();",],"description":"Desligar o atuador ventilador disponível no Robô 3."},
                "bc.Heat": {
                    "prefix": "bc.Heat",
                    "body": ["bc.Heat()",],"description":"Retorna a temperatura percebida pelo sensor de temperatura do robô."},
                "bc.HasVictim": {
                    "prefix": "bc.HasVictim",
                    "body": ["bc.HasVictim()",],"description":"Retorna verdadeiro se existir uma ou mais vítimas no atuador."},
                "bc.RobotSpeed": {
                    "prefix": "bc.RobotSpeed",
                    "body": ["bc.RobotSpeed()",],"description":"Retorna a velocidade de rotação dos motores. "},
     "if": {
          "prefix": "?if",
          "body": [
               "if (${1:condition}) {\n\t\n}"
          ],
          "description": "Estrutura que executa os comandos apenas se a condição definida for verdadeira."
     },
     "ifelse": {
          "prefix": "?ifelse",
          "body": [
               "if (${1:condition}) {\n\t\n} else {\n\t\n}"
          ],
          "description": "Estrutura que avalia a condição e executa os comandos do 'se' caso seja verdadeira e  do 'senao' caso seja falsa."
     },
     "ifelseif": {
          "prefix": "?ifelseif",
          "body": [
               "if (${1:condition}) \n\t\n} else if (${1:condition}) {\n\t\n} "
          ],
          "description": "Estrutura que possibilita verificar outra condição 'se', caso a primeira seja falsa."
     },
     "while": {
          "prefix": "?while",
          "body": [
               "while (${1:condition}) {\n\t\n}"
          ],
          "description": "Laço de repetição que executa os comandos até que a condição seja falsa."
     },
     "do": {
          "prefix": "?do",
          "body": [
               "do {\n\t\n} while (${1:condition})"
          ],
          "description": "Laço de repetição que executa os comandos antes de verificar a condição, até que seja falsa."
     },
     "for": {
          "prefix": "?for",
          "body": [
               "for (int ${1:i} = 0; ${2:i} < ${3:max}; ${4:i}++) {\n\t\n}"
          ],
          "description": "Laço de repetição que executa os comandos por uma quantidade de vezes predeterminada."
     },
     "Main": {
          "prefix": "?main",
          "body": [
               "void Main () {\n\t\n}"
          ],
          "description": "Estrutura básica para um código em C#."
     }
}